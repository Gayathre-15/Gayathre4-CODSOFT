import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Sample User-Item Matrix (rows: users, columns: movies, values: ratings)
ratings_data = {
    'User': ['User1', 'User1', 'User1', 'User2', 'User2', 'User3', 'User3', 'User4', 'User4'],
    'Movie': ['Movie1', 'Movie2', 'Movie3', 'Movie1', 'Movie3', 'Movie2', 'Movie3', 'Movie1', 'Movie2'],
    'Rating': [5, 4, 1, 4, 5, 5, 3, 3, 2]
}

# Convert the data into a Pandas DataFrame
df = pd.DataFrame(ratings_data)

# Create a User-Item Matrix
user_movie_matrix = df.pivot_table(index='User', columns='Movie', values='Rating').fillna(0)

# Display the User-Item Matrix
print("User-Item Matrix:")
print(user_movie_matrix)

# Calculate the cosine similarity between users
user_similarity = cosine_similarity(user_movie_matrix)

# Convert the user similarity array into a DataFrame for better readability
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Display the User Similarity Matrix
print("\nUser Similarity Matrix (Cosine Similarity):")
print(user_similarity_df)

# Function to get movie recommendations for a user based on similar users' ratings
def recommend_movies(user, user_movie_matrix, user_similarity_df, num_recommendations=3):
    user_index = user_movie_matrix.index.get_loc(user)  # Get the index of the user
    similar_users = user_similarity_df[user].sort_values(ascending=False).index[1:]  # Sort similar users (exclude self)

    # Get the movies the user has already rated
    user_ratings = user_movie_matrix.loc[user]
    rated_movies = user_ratings[user_ratings > 0].index

    # Weighted sum of ratings from similar users
    recommendations = pd.Series()
    for similar_user in similar_users:
        similar_user_ratings = user_movie_matrix.loc[similar_user]
        weighted_ratings = similar_user_ratings * user_similarity_df.loc[user, similar_user]  # Apply similarity weight
        recommendations = recommendations.add(weighted_ratings, fill_value=0)

    # Remove movies the user has already rated
    recommendations = recommendations.drop(rated_movies, errors='ignore')

    # Sort recommendations by weighted rating
    recommendations = recommendations.sort_values(ascending=False)

    return recommendations.head(num_recommendations)

# Get recommendations for User1
user_to_recommend = 'User1'
recommendations = recommend_movies(user_to_recommend, user_movie_matrix, user_similarity_df, num_recommendations=3)

print(f"\nTop movie recommendations for {user_to_recommend}:")
print(recommendations)
